{"version":3,"sources":["utilities.js","App.js","reportWebVitals.js","index.js"],"names":["fingerJoints","thumb","indexFinger","middleFinger","ringFinger","pinky","drawPicture","hand","ctx","img","Image","src","drawImage","drawHand","predictions","length","forEach","prediction","landmarks","j","Object","keys","finger","k","firstJointIndex","secondJointIndex","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","i","x","y","arc","Math","PI","fillStyle","fill","App","webcamRef","useRef","canvasRef","runHandpose","a","handpose","net","console","log","setInterval","detect","current","video","readyState","videoWidth","videoHeight","width","height","estimateHands","getContext","tf","className","ref","mirrored","style","visibility","position","marginLeft","marginRight","left","right","textAlign","zindex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.526baff4.chunk.js","sourcesContent":["// Points for fingers\r\nconst fingerJoints = {\r\n    thumb: [0, 1, 2, 3, 4],\r\n    indexFinger: [0, 5, 6, 7, 8],\r\n    middleFinger: [0, 9, 10, 11, 12],\r\n    ringFinger: [0, 13, 14, 15, 16],\r\n    pinky: [0, 17, 18, 19, 20],\r\n};\r\n\r\n// Drawing function for the cat\r\nexport const drawPicture = (hand, ctx) => {\r\n  const img = new Image(512, 512);\r\n  img.src = 'https://thiscatdoesnotexist.com/';\r\n  ctx.drawImage(img, 64, 0);\r\n  drawHand(hand, ctx);\r\n};\r\n\r\n// Drawing function for the hand\r\nexport const drawHand = (predictions, ctx) => {\r\n    if (predictions.length > 0) {\r\n      predictions.forEach((prediction) => {\r\n        const landmarks = prediction.landmarks;\r\n        for (let j = 0; j < Object.keys(fingerJoints).length; j++) {\r\n          let finger = Object.keys(fingerJoints)[j];\r\n          for (let k = 0; k < fingerJoints[finger].length - 1; k++) {\r\n            const firstJointIndex = fingerJoints[finger][k];\r\n            const secondJointIndex = fingerJoints[finger][k + 1];\r\n            // Draw paths\r\n            ctx.beginPath();\r\n            ctx.moveTo(\r\n                landmarks[firstJointIndex][0],\r\n                landmarks[firstJointIndex][1]\r\n            );\r\n            ctx.lineTo(\r\n                landmarks[secondJointIndex][0],\r\n                landmarks[secondJointIndex][1]\r\n            );\r\n            ctx.strokeStyle = \"white\";\r\n            ctx.lineWidth = 15;\r\n            ctx.stroke();\r\n          }\r\n        }\r\n        // Draw landmarks\r\n        for (let i = 0; i < landmarks.length; i++) {\r\n          const x = landmarks[i][0];\r\n          const y = landmarks[i][1];\r\n          ctx.beginPath();\r\n          ctx.arc(x, y, 10, 0, 3 * Math.PI);\r\n          ctx.fillStyle = \"white\";\r\n          ctx.fill();\r\n        }\r\n      });\r\n    }\r\n  };","import React, { useRef } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\nimport { drawPicture } from \"./utilities\";\n\nfunction App() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  const runHandpose = async () => {\n    const net = await handpose.load();\n    console.log(\"Handpose model loaded.\");\n    setInterval(() => {\n      detect(net);\n    }, 100);\n  };\n\n  const detect = async (net) => {\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n      // Make Detections\n      const hand = await net.estimateHands(video, true);\n      console.log(hand);\n      // Draw on canvas\n      const ctx = canvasRef.current.getContext(\"2d\");\n      drawPicture(hand, ctx);\n    }\n  };\n\n  console.log(tf);\n\n  runHandpose();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Webcam\n          ref={webcamRef}\n          mirrored={true}\n          style={{\n            visibility: \"hidden\",\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}\n        />\n        <h1> Now loading cat... </h1>\n        <canvas\n          ref={canvasRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}